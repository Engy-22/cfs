DROP DATABASE IF EXISTS cfs;
CREATE DATABASE cfs;
USE cfs;


CREATE TABLE `conference_codes` (
	name VARCHAR(12) NOT NULL DEFAULT '',
	code CHAR(2) NOT NULL DEFAULT '',
	PRIMARY KEY (name)
);
INSERT INTO conference_codes (name,code) VALUES
	('MWC',      'MW'),
	('MAC',      'MA'),
	('SEC',      'SE'),
	('CUSA',     'CU'),
	('Pac-10',   'P1'),
	('Pac-12',   'P1'),
	('Sun Belt', 'SB'),
	('Ind',      'IN'),
	('Big 12',   'B2'),
	('WAC',      'WA'),
	('Big East', 'BE'),
	('ACC',      'AC'),
	('Big Ten',  'BT');

CREATE TABLE `schools` (
	name VARCHAR(31) NOT NULL,

	yr_from YEAR(4) NOT NULL DEFAULT '1901',
	yr_to YEAR(4) NOT NULL DEFAULT '2012',
	yrs TINYINT UNSIGNED NOT NULL DEFAULT 0,

	games SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	win SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	loss SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	tie SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	pct DECIMAL(4,3) NOT NULL DEFAULT 0.0,

	bowls SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	bowl_win SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	bowl_loss SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	bowl_tie SMALLINT UNSIGNED NOT NULL DEFAULT 0,
	bowl_pct DECIMAL(4,3) NOT NULL DEFAULT 0.0,

	sr_srs DECIMAL(4,2) NOT NULL DEFAULT 0.0,
	sr_sos DECIMAL(4,2) NOT NULL DEFAULT 0.0,

	ap_yrs TINYINT UNSIGNED NOT NULL DEFAULT 0,
	conf_champs TINYINT UNSIGNED NOT NULL DEFAULT 0,

	notes VARCHAR(63) NOT NULL DEFAULT '',

	PRIMARY KEY (name)
);

CREATE TABLE `stats` (
	name VARCHAR(31) NOT NULL,
	season YEAR(4) NOT NULL DEFAULT '0000',
	conference VARCHAR(10) NOT NULL DEFAULT '',

	games TINYINT UNSIGNED NOT NULL DEFAULT 0,
	win TINYINT UNSIGNED NOT NULL DEFAULT 0,
	loss TINYINT UNSIGNED NOT NULL DEFAULT 0,

	ppg DECIMAL(4,1) NOT NULL DEFAULT 0.0,
	opp_ppg DECIMAL(4,1) NOT NULL DEFAULT 0.0,

	o_pass_yds DECIMAL(5,1) NOT NULL DEFAULT 0.0,
	o_rush_yds DECIMAL(5,1) NOT NULL DEFAULT 0.0,
	o_pen_yds DECIMAL(4,1) NOT NULL DEFAULT 0.0,
	o_to DECIMAL(3,1) NOT NULL DEFAULT 0.0,

	d_pass_yds DECIMAL(5,1) NOT NULL DEFAULT 0.0,
	d_rush_yds DECIMAL(5,1) NOT NULL DEFAULT 0.0,
	d_pen_yds DECIMAL(4,1) NOT NULL DEFAULT 0.0,
	d_to DECIMAL(3,1) NOT NULL DEFAULT 0.0,

	PRIMARY KEY (name,season),
	CONSTRAINT stats_school_name FOREIGN KEY (name)
		REFERENCES schools (name) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT stats_conf_name FOREIGN KEY (conference)
		REFERENCES conference_codes (name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE `past_games` (
	season YEAR(4) NOT NULL DEFAULT '0000',
	week TINYINT UNSIGNED NOT NULL DEFAULT 0,

	gm_date DATE NOT NULL DEFAULT '0000-00-00',
	gm_day ENUM('Sun','Mon','Tue','Wed','Thu','Fri','Sat') NOT NULL DEFAULT 'Sat',

	t1_name VARCHAR(32) NOT NULL DEFAULT '',
	t1_score TINYINT UNSIGNED DEFAULT NULL,
	t1_last DATE NOT NULL DEFAULT '0000-00-00',

	site ENUM('T1','N','B') DEFAULT 'T1',

	t2_name VARCHAR(32) NOT NULL DEFAULT '',
	t2_score TINYINT UNSIGNED DEFAULT NULL,
	t2_last DATE NOT NULL DEFAULT '0000-00-00',

	notes VARCHAR(63) NOT NULL DEFAULT '',

	PRIMARY KEY (gm_date,t1_name,t2_name),
	KEY season (season),
	CONSTRAINT pastgms_sched_team1 FOREIGN KEY (t1_name)
		REFERENCES schools (name) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT pastgms_sched_team2 FOREIGN KEY (t2_name)
		REFERENCES schools (name) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE OR REPLACE VIEW v_training_data AS SELECT
  pg.season as season,
  pg.gm_date as gamedate,
  t1.name as team1,
  t2.name as team2,
  -- final score differential
  CONVERT(pg.t1_score, SIGNED) - CONVERT(pg.t2_score, SIGNED) as r_score_diff,
  -- site
  pg.site as f_site,
  -- offensive scoring total / differential
  t1.ppg + t2.opp_ppg as f_o_score_sum,
  t1.ppg - t2.opp_ppg as f_o_score_diff,
  -- defensive scoring total / differential
  t1.opp_ppg + t2.ppg as f_d_score_sum,
  t1.opp_ppg - t2.ppg as f_d_score_diff,
  -- offensive rushing total / differential
  t1.o_rush_yds + t2.d_rush_yds as f_o_rush_sum,
  t1.o_rush_yds - t2.d_rush_yds as f_o_rush_diff,
  -- defensive rushing total / differential
  t1.d_rush_yds + t2.o_rush_yds as f_d_rush_sum,
  t1.d_rush_yds - t2.o_rush_yds as f_d_rush_diff,
  -- offensive passing total / differential
  t1.o_pass_yds + t2.d_pass_yds as f_o_pass_sum,
  t1.o_pass_yds - t2.d_pass_yds as f_o_pass_diff,
  -- defensive passing total / differential
  t1.d_pass_yds + t2.o_pass_yds as f_d_pass_sum,
  t1.d_pass_yds - t2.o_pass_yds as f_d_pass_diff,
  -- penalty yards differential
  (t1.o_pen_yds + t1.d_pen_yds) - (t2.o_pen_yds + t2.d_pen_yds) as f_pen_diff,
  -- turnover differential
  t1.d_to - t1.o_to - t2.d_to + t2.o_to as f_to_diff,
  -- rest interface (assume max of 14 days rest per team)
  IF(pg.t1_last, CASE WHEN DATEDIFF(pg.gm_date,pg.t1_last) > 14 THEN 14 ELSE DATEDIFF(pg.gm_date,pg.t1_last) END, 14) - 
    IF(pg.t2_last, CASE WHEN DATEDIFF(pg.gm_date,pg.t2_last) > 14 THEN 14 ELSE DATEDIFF(pg.gm_date,pg.t2_last) END, 14)
    as f_rest_diff,
  -- winning pct diff
  CONVERT(t1.win/t1.games - t2.win/t2.games, DECIMAL(4,3)) as f_winpct_diff,
  -- conference affiliations
  cc1.code as f_t1_conf,
  cc2.code as f_t2_conf
  
FROM
  past_games as pg,
  stats as t1,
  stats as t2,
	conference_codes as cc1,
	conference_codes as cc2

WHERE
  pg.season = t1.season AND t1.name = pg.t1_name AND cc1.name = t1.conference AND
	pg.season = t2.season AND t2.name = pg.t2_name AND cc2.name = t2.conference;


CREATE TABLE `google_oauth_tokens` (
	id VARCHAR(32) NOT NULL DEFAULT '',
	token VARCHAR(64) NOT NULL DEFAULT '',
	expires INT UNSIGNED NOT NULL DEFAULT 0,
	PRIMARY KEY (id),
	UNIQUE KEY (token),
	KEY expires (expires)
);

CREATE TABLE `games` (
	season YEAR(4) NOT NULL DEFAULT '0000',
	week TINYINT UNSIGNED NOT NULL DEFAULT 0,
	model VARCHAR(64) NOT NULL DEFAULT '',

	prediction TINYINT DEFAULT NULL,
	prediction_lock CHAR(36) DEFAULT NULL,

	gm_date DATE NOT NULL DEFAULT '0000-00-00',
	gm_day ENUM('Sun','Mon','Tue','Wed','Thu','Fri','Sat') NOT NULL DEFAULT 'Sat',

	t1_name VARCHAR(32) NOT NULL DEFAULT '',
	t1_score TINYINT UNSIGNED DEFAULT NULL,
	t1_last DATE NOT NULL DEFAULT '0000-00-00',

	site ENUM('T1','N','B') DEFAULT 'T1',

	t2_name VARCHAR(32) NOT NULL DEFAULT '',
	t2_score TINYINT UNSIGNED DEFAULT NULL,
	t2_last DATE NOT NULL DEFAULT '0000-00-00',

	notes VARCHAR(63) NOT NULL DEFAULT '',

	PRIMARY KEY (gm_date,t1_name,t2_name),
	KEY season (season),
	KEY prediction_lock (prediction_lock),
	CONSTRAINT gms_sched_team1 FOREIGN KEY (t1_name)
		REFERENCES schools (name) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT gms_sched_team2 FOREIGN KEY (t2_name)
		REFERENCES schools (name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE OR REPLACE VIEW v_prediction_queue AS SELECT
  g.season as season,
  g.gm_date as gamedate,
  t1.name as team1,
  t2.name as team2,
	g.prediction_lock as prediction_lock,

  -- site
  g.site as f_site,
  -- offensive scoring total / differential
  t1.ppg + t2.opp_ppg as f_o_score_sum,
  t1.ppg - t2.opp_ppg as f_o_score_diff,
  -- defensive scoring total / differential
  t1.opp_ppg + t2.ppg as f_d_score_sum,
  t1.opp_ppg - t2.ppg as f_d_score_diff,
  -- offensive rushing total / differential
  t1.o_rush_yds + t2.d_rush_yds as f_o_rush_sum,
  t1.o_rush_yds - t2.d_rush_yds as f_o_rush_diff,
  -- defensive rushing total / differential
  t1.d_rush_yds + t2.o_rush_yds as f_d_rush_sum,
  t1.d_rush_yds - t2.o_rush_yds as f_d_rush_diff,
  -- offensive passing total / differential
  t1.o_pass_yds + t2.d_pass_yds as f_o_pass_sum,
  t1.o_pass_yds - t2.d_pass_yds as f_o_pass_diff,
  -- defensive passing total / differential
  t1.d_pass_yds + t2.o_pass_yds as f_d_pass_sum,
  t1.d_pass_yds - t2.o_pass_yds as f_d_pass_diff,
  -- penalty yards differential
  (t1.o_pen_yds + t1.d_pen_yds) - (t2.o_pen_yds + t2.d_pen_yds) as f_pen_diff,
  -- turnover differential
  t1.d_to - t1.o_to - t2.d_to + t2.o_to as f_to_diff,
  -- rest differential (assume max of 14 days rest per team)
  IF(g.t1_last, CASE WHEN DATEDIFF(g.gm_date,g.t1_last) > 14 THEN 14 ELSE DATEDIFF(g.gm_date,g.t1_last) END, 14) - 
    IF(g.t2_last, CASE WHEN DATEDIFF(g.gm_date,g.t2_last) > 14 THEN 14 ELSE DATEDIFF(g.gm_date,g.t2_last) END, 14)
    as f_rest_diff,
  -- winning pct diff
  CONVERT(t1.win/t1.games - t2.win/t2.games, DECIMAL(4,3)) as f_winpct_diff,
  -- conference affiliations
  cc1.code as f_t1_conf,
  cc2.code as f_t2_conf
  
FROM
  games as g,
  stats as t1,
  stats as t2,
	conference_codes as cc1,
	conference_codes as cc2

WHERE
	g.prediction IS NULL
	AND g.season = t1.season AND t1.name = g.t1_name AND cc1.name = t1.conference
	AND g.season = t2.season AND t2.name = g.t2_name AND cc2.name = t2.conference;


CREATE OR REPLACE VIEW v_game_results AS SELECT
	season,
	model,
	gm_date,
	IF ( site = 'B', 'Bowl', 'Reg Season' ) as game_type,

	IF ( prediction < 0,
		CONCAT(
			TRIM(t2_name), ' [', ABS(prediction), ']',
			IF ( site = 'T1', ' @ ', ' vs. '),
			TRIM(t1_name)),
		CONCAT(
			TRIM(t2_name),
			IF ( site = 'T1', ' @ ', ' vs. '),
			TRIM(t1_name), ' [', prediction, ']')
	) as game,
	CONCAT(t2_score, '-',t1_score) as game_result,
	-- ABS(prediction) as abs_pred,

	CASE WHEN prediction < 0 THEN
		IF ( t2_score > t1_score, 'CORRECT', 'INCORRECT' )
	ELSE
		IF ( t1_score > t2_score, 'CORRECT', 'INCORRECT' )
	END as prediction_result,

	notes

FROM
	games

WHERE
	prediction IS NOT NULL;

